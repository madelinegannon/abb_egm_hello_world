#pragma once
#include <WinSock2.h>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <sstream>
#include <chrono>
#include <stdlib.h>

#include "egm.pb.h" // generated by Google protoc.exe

#pragma comment(lib, "Ws2_32.lib")      // socket lib
#pragma comment(lib, "libprotobuf.lib") // protobuf lib

void initWinSock();

class MechanicalUnit {
protected:
	std::string MechID = "Unknown";
	//variables for UDP-Protobuf communication
	struct sockaddr_in serverAddr, Addr;
	int port;
	SOCKET sock;
	int n_recieve;
	int len_recieve;
	char ProtoMessage[1400];
	std::string MessageBuffer;

	unsigned int seq_no = 0;
	unsigned int first_msg_time;
	std::ofstream log;

	abb::egm::EgmRobot* fromMechUnit = NULL;
	abb::egm::EgmSensor* toMechUnit = NULL;

public:
	MechanicalUnit(const std::string id, int port_no);
	~MechanicalUnit();
	void EGMRecieve();
	void EGMSend();

};

class Robot : public MechanicalUnit {
public:
	std::chrono::time_point<std::chrono::steady_clock> StreamStartTime;

	double RobotPos[3] = { 0,0,0 };
	double RobotEuler[3] = { 0,0,0 };
	double RobotJoint[6] = { 0,0,0,0,0,0 };

	double RobotPosSpeed[3] = { 0,0,0 };
	double RobotEulerSpeed[3] = { 0,0,0 };
	double RobotJointSpeed[6] = { 0,0,0,0,0,0 };

	double initRobotPos[3] = { 0,0,0 };          // initial robot x,y,z (mm) co-ordinates
	double initRobotEuler[3] = { 0,0,0 };        // initial robot euler angle (degrees)
	double initRobotJoint[6] = { 0,0,0,0,0,0 };  // initial robot joint (degrees)

	double nextRobotPos[3] = { 0,0,0 };              // robot x,y,z (mm) co-ordinates control variables
	double nextRobotEuler[3] = { 0,0,0 };            // robot euler angle (degrees) control variables
	double nextRobotJoint[6] = { 0,0,0,0,0,0 };      // robot joint (degrees) control variables

	double nextRobotPosSpeed[3] = { 0,0,0 };           // robot x,y,z speed (mm/s) control variables
	double nextRobotEulerSpeed[3] = { 0,0,0 };          // robot euler speed (degrees/s) variables
	double nextRobotJointSpeed[6] = { 0,0,0,0,0,0 };   // robot joint speed (degrees/s) variables

	Robot(const std::string id, int port_no) : MechanicalUnit(id, port_no) {}
	void initRobot();
	void RobotSetCartesian(bool SendSpeed = true);
	void RobotSetJoint(bool SendSpeed = true);
	void LogCartesianData(int msg_no, bool Readable = true);
	void LogJointData(int msg_no, bool Readable = true);
	void FeedbackCycleCartesian(int msg_no, float* cycle_time = nullptr, bool Readable = true);
	void WriteCycleCartesian(float* cycle_time = nullptr);
	void FeedbackCycleJoint(int msg_no, float* cycle_time = nullptr, bool Readable = true);
	void WriteCycleJoint(float* cycle_time = nullptr);
};

class Track : public MechanicalUnit {
public:
	double TrackJoint = 0;
	double TrackJointSpeed = 0;

	double initTrackJoint = 0;       // initial track joint value (mm)
	double initTrackJointSpeed = 0;  // initial track joint speed (mm/s)

	double nextTrackJoint = 0;        // track joint value (mm) control variables
	double nextTrackJointSpeed = 0;   // track joint speed (mm/s) control variables

	Track(const std::string id, int port_no) : MechanicalUnit(id, port_no) {}
	void initTrack();
	void TrackSetJoint(bool SetSpeed = true);
	void LogTrackData(int msg_no, bool Readable = true);
	void FeedbackCycleTrack(int msg_no, float* cycle_time = nullptr, bool Readable = true);
	void WriteCycleTrack(float* cycle_time = nullptr);
};